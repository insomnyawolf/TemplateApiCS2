@page "/"
@using blazorapp.RestApi.Models;
@inject RestApi.Client ApiClient

<style>
    /* Popup box BEGIN */
    .hide {
        display: none;
    }

    .hover_bkgr_fricc {
        background: rgba(0,0,0,.4);
        cursor: pointer;
        display: none;
        height: 100%;
        position: fixed;
        text-align: center;
        top: 0;
        width: 100%;
        z-index: 10000;
    }
    /* Popup box END */
</style>

<PageTitle>Weather forecast</PageTitle>

<p>This component demonstrates fetching data from the server.</p>

@if (tasks is null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var task in tasks)
    {
        var viewModel = new ViewModel()
                    {
                        ApiClient = ApiClient,
                        PossibleStates = states,
                        TasksItem = task
                    };
        <div>
            <InputCheckbox @bind-Value="viewModel.State" /><span>@viewModel.String</span>
            <InputText @bind-Value="@viewModel.Name"></InputText>
            <InputTextArea @bind-Value="@viewModel.Description"></InputTextArea>
            <button @onclick="() => DeleteTask(viewModel)">X</button>
        </div>
    }

    <button>Save</button>
}

<button @onclick="() => PopupToggle()">+</button>

@if (states is not null)
{
    <div class="@PopupClasses">
        <InputText @bind-Value="@newTask.TasksItem.Name"></InputText>
        <InputTextArea @bind-Value="@newTask.TasksItem.Description"></InputTextArea>
        <InputSelect @bind-Value="newTask.State">
            @foreach (var state in states)
            {
                <option value="@state.Id">@state.Value</option>
            }
        </InputSelect>
    </div>

    <button @onclick="() => AddTask()">AddTask</button>
}

@code {
    private AddViewModel newTask = new AddViewModel();
    private IList<TasksItem>? tasks;
    private IList<TaskStateEnum>? states;
    protected override async Task OnInitializedAsync()
    {
        tasks = await ApiClient.TaskAllAsync();
        states = await ApiClient.TaskStateEnumAsync();
    }

    private void DeleteTask(ViewModel viewModel)
    {
        Task.Run(async () =>
        {
            await ApiClient.TaskDELETEAsync(viewModel.TasksItem.Id);
            newTask = new AddViewModel();
            tasks = await ApiClient.TaskAllAsync();
            StateHasChanged();
        });
    }

    public string PopupClasses { get; set; } = "";
    private void PopupToggle()
    {
        const string hideClass = "hide";
        if (PopupClasses.IndexOf(hideClass) > -1)
        {
            PopupClasses = PopupClasses.Replace(hideClass, "");
        }
        else
        {
            PopupClasses += $" {hideClass}";
        }

        PopupClasses = PopupClasses.Trim();
    }

    private void AddTask()
    {
        Task.Run(async () =>
        {
            PopupToggle();
            await ApiClient.TaskPOSTAsync(newTask.TasksItem);
            newTask = new AddViewModel();
            tasks = await ApiClient.TaskAllAsync();
            StateHasChanged();
        });
    }

    public class AddViewModel
    {
        public TasksItem TasksItem { get; set; } = new TasksItem();

        public string State
        {
            get
            {
                return TasksItem.State.ToString();
            }
            set
            {
                TasksItem.State = long.Parse(value);
            }
        }
    }

    public class ViewModel
    {
        public RestApi.Client ApiClient { get; set; }
        public TasksItem TasksItem { get; set; }
        public IList<TaskStateEnum>? PossibleStates;
        public bool State
        {
            get
            {
                return TasksItem.State == 1;
            }
            set
            {
                if (value)
                {
                    TasksItem.State = 1;
                }
                else
                {
                    TasksItem.State = 0;
                }
                UpdateValues();
            }
        }

        public string Name
        {
            get
            {
                return TasksItem.Name;
            }
            set
            {
                TasksItem.Name = value;
                UpdateValues();
            }
        }

        public string Description
        {
            get
            {
                return TasksItem.Description;
            }
            set
            {
                TasksItem.Description = value;
                UpdateValues();
            }
        }

        public string String
        {
            get
            {
                return PossibleStates.FirstOrDefault(item => item.Id == TasksItem.State)?.Value;
            }
        }

        private void UpdateValues()
        {
            Task.Run(() => ApiClient.TaskPUTAsync(TasksItem));
        }
    }
}
