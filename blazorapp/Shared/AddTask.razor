@using blazorapp.RestApi;
@using blazorapp.RestApi.Models;
@using static blazorapp.Shared.TaskListItem;

<style>
    .hide {
        display: none;
    }

    .item {
        width: 500px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        position: relative;
        border-radius: 5px;
    }

    .item:hover {
        box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
    }

    .addButton {
        position: absolute;
        top: 0px;
        right: 0px;
        border-radius: 8px;
        font-size: 0.7em;
    }

    .fillw {
        width: 100%;
    }
</style>

<button @onclick="() => PopupToggle()">+</button>
<div class="@PopupClasses item">
    <InputSelect @bind-Value="newTask.State">
        @foreach (var state in States)
        {
            <option value="@state.Id">@state.Value</option>
        }
    </InputSelect>
    <button class="addButton" @onclick="() => AddTaskRequest()">AddTask</button>
    <InputText class="fillw" @bind-Value="@newTask.TasksItem.Name"></InputText>
    <InputTextArea class="fillw" @bind-Value="@newTask.TasksItem.Description"></InputTextArea>
</div>


@code {
    [Parameter]
    public ApiClient ApiClient { get; set; }

    [Parameter]
    public IList<TaskStateEnum> States { get; set; }

    [Parameter]
    public Action<TasksItem> OnTaskAdded { get; set; }

    private AddViewModel newTask = new AddViewModel();

    public string PopupClasses { get; set; } = "hide";
    private void PopupToggle()
    {
        const string hideClass = "hide";
        if (PopupClasses.IndexOf(hideClass) > -1)
        {
            PopupClasses = PopupClasses.Replace(hideClass, "");
        }
        else
        {
            PopupClasses += $" {hideClass}";
        }

        PopupClasses = PopupClasses.Trim();
    }

    private void AddTaskRequest()
    {
        Task.Run(async () =>
        {
            PopupToggle();
            var id = await ApiClient.TaskPOSTAsync(newTask.TasksItem);
            newTask.TasksItem.Id = id;
            OnTaskAdded?.Invoke(newTask.TasksItem);
            newTask = new AddViewModel();
        });
    }

    public class AddViewModel
    {
        public TasksItem TasksItem { get; set; } = new TasksItem()
            {
                State = 0,
            };

        public string State
        {
            get
            {
                return TasksItem.State.ToString();
            }
            set
            {
                TasksItem.State = long.Parse(value);
            }
        }
    }
}
