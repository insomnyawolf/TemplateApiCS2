@using blazorapp.RestApi.Models;

<style>
    .item {
        width: 500px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        position: relative;
        border-radius: 5px;
    }

        .item:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
        }

        .item .textArea {
            display: none;
        }

        .item:hover .textArea {
            display: block;
        }

    .delete {
        position: absolute;
        top: 0px;
        right: 0px;
        border-radius: 8px;
        font-size: 0.7em;
    }

    .fillw {
        width: 100%;
    }

</style>

<div class="item">
    <div class="">
        <InputCheckbox @bind-Value="Value.State" />
        @Value.String
    </div>
    <button class="delete" @onclick="() => DeleteTask()">X</button>

    <InputText class="fillw" @bind-Value="@Value.Name"></InputText>
    <InputTextArea class="fillw textArea" @bind-Value="@Value.Description"></InputTextArea>
</div>

@code {
    [Parameter]
    public Action<TasksItem> OnDeleted { get; set; }

    [Parameter]
    public TaskListItemViewModel Value { get; set; }

    private void DeleteTask()
    {
        Task.Run(async () =>
        {
            var task = Value.TasksItem;
            await Value.ApiClient.TaskDELETEAsync(task.Id);
            OnDeleted?.Invoke(task);
            StateHasChanged();
        });
    }

    public class TaskListItemViewModel
    {
        public RestApi.ApiClient ApiClient { get; set; }
        public TasksItem TasksItem { get; set; }
        public IList<TaskStateEnum>? PossibleStates;
        public bool State
        {
            get
            {
                return TasksItem.State == 1;
            }
            set
            {
                if (value)
                {
                    TasksItem.State = 1;
                }
                else
                {
                    TasksItem.State = 0;
                }
                UpdateValues();
            }
        }

        public string Name
        {
            get
            {
                return TasksItem.Name;
            }
            set
            {
                TasksItem.Name = value;
                UpdateValues();
            }
        }

        public string Description
        {
            get
            {
                return TasksItem.Description;
            }
            set
            {
                TasksItem.Description = value;
                UpdateValues();
            }
        }

        public string String
        {
            get
            {
                return PossibleStates.FirstOrDefault(item => item.Id == TasksItem.State)?.Value;
            }
        }

        private void UpdateValues()
        {
            Task.Run(() => ApiClient.TaskPUTAsync(TasksItem));
        }
    }
}
